Ask
===
- dCollideCylinderTrimesh() deosn't appear to recompute the AABB (explicitly via recompiute() or implicitly via getAABB)
  However, box-trimesh collision DOES recompute it: see dCollideBTL() or dCollideTrimeshPlane()
- Was there something with contact sorting? dCollideConvexTrimeshTrianglesCCD() seems to violate that
  (swaps last contact with current) -> Only if length is 0 ...
- collision_libccd.cpp:768 -> "tempContact.side2 = i;" -> "tempContact.side2 = indices[i];"


Before release:
===============
- Disable DEBUG?
mvn animal-sniffer:check
mvn versions:display-dependency-updates
mvn versions:display-plugin-updates


Things left out for 0.5.0 (missing from 0.15.1 vs 0.16.2)
=========================================================
 Not ported:
  - resource_control.*
  - simple_cooperation.*
  - Updates to DxWorldProcessContext
  - ThreadedEquationSolverLDLT* and *Cooperative* is missing from:
    - fastldltfactor(_impl).*
    - fastlsolve(_impl).*
    - fastltsolve(_impl).*:
    - fastvecscale(_impl).*:
  - objects.h/.cpp  /  obstack.h/.cpp


Java Version
============
- We should aim for Oreo or later (Android 8.0, released 2017, API Level 26: https://apilevels.com/)
- We use animal-sniffer (respects desugaring by D8): https://github.com/open-toast/gummy-bears

- Android Runtime replaced Dalvik as default Runtime in Android 5: https://en.wikipedia.org/wiki/Android_version_history
- Android 8 (Oreo) is about 8% share:
  - https://apilevels.com/
  - https://www.composables.co/tools/distribution-chart
- https://medium.com/androiddevelopers/support-for-newer-java-language-apis-bca79fc8ef65
  - Support vor never Java features depend on Android Gradle Plugin 4.0.0 -> "Desugaring"
    -> Does that also work with OSGI?
    -> This was release in June 2017 ->
  - Android 11 support "up to" Java 13 (Question: complete 13 or partial 13??)
- 2018: https://jakewharton.com/androids-java-9-10-11-and-12-support/


March 2023:
General cleanup:
- update DVector3 safeNormalize to use max() and then compare to 0. ALso see: https://github.com/JOML-CI/JOML/issues/66


July 6th 2009:
Some minor things I found in the code:
- The test universal.cpp (587-593) is probably incorrectly checking the first field of the array 3 times, rather than checking the 1st, 2nd, and 3rd field.
- demo_gyroscopic is not initializing 'contactgroup'
- demo_kinematic is not initializing 'joints'
- demo_moving_convex uses dWorldStepFast1, which is deprecated:
- dJointAddPUTorque (...) : Can anyone point me to the implementation? I don't think there is one.
- http://opende.sourceforge.net/wiki/index.php/Joint_Param_Documentation
  This indicate that PU & PR joint have not parameters, I don't think that's correct?
- GeomTransform is obsolete since 0.6 (according to the Wiki), but it is still used in several demos:
  demo_boxstack, demo_heightfield, demo_jointPU, demo_motion, demo_spacestress.
  I haven't used it myself, so is it still required?


REPORT MISSING:
- dBody.destroy()
- dCapsule class
- dPlane2DJoint class
- dMass.setCylinder in OO-API
- dMass.setSphereTotal in OO-API
- dMass.check()
- dWorld.void setAutoDisableAverageSamplesCount(int average_samples_count)
- dWorld.void setContactMaxCorrectingVel (double vel);
- dWorld.destroy()
- dJointGroup.destroy()
- dGeom.setOffsetPosition()
- dGeom.setOffsetRotation()
- dGeomTransform API class
- dPistonJoint.setAnchorOffset()


REPORT !!!!
- Report that SAP-Space BoxPruning may miss some collisions:
  while ( poslist[*RunningAddress++] < poslist[IndexPair.id0] ) {}
  This line increases the RunningAddress to the first that is not
  smaller PLUS ONE!!  DONE (2009-05-08)
  

DOC:
- replace @sa with @see
- replace \li with <li>

dJointGetAMotorNumAxes: Unused @param 'num'
dJointGetAMotorAxis: Unused @param 'rel'
dJointGetAMotorMode: Unused @param 'mode'


DIFFERENCES:
- ode4j has No OPCODE, only GIMPACT. ODE defaults to OPCODE.
- ode4j LCP uses ROWPTRS=false
- No coop-multithreading, no memory arenas management
- SAP-Space uses different implementation (merge-sort i.o. radix-sort)
- DrawStuff is slow. The implementation would require significant changes to 
  be a fast as the C/C++ version.
- The OO-API is the main API. The static CCP-like API is only available to
  simplify porting.
- A custom cpp2java library is used for porting the code.
- Much of the math has been moved to a separate package. dVector3 and their 
  like now provide much own functionality.
- The test harnesses now partly use JUnit 4, instead of the C/C++ test library.   
- TLS Thread Local Storage has not been ported. Most likely, there is no need to
  port this.
- The Java implementation is 'thread-tolerant' (CORRECT TERM???) by avoiding  
  any static variables. 
  That means it should be possible to process different dWorlds in parallel,
  and possibly even multiple spaces in parallel, if the dWorld is not modified (verify!).
- Contrary to the policy in C/C++ ODE, I prefer in Java return immutable DVectors when
  calling getXXX(), rather than having to pass in a DVector to be overwritten. The
  reasons are partly specific to Java:
  - Returning an immutable is very straight forward using an immutable interface
  - I may avoid unnecessary object creation if the returned value is only used briefly
    and only for reading
  - It avoid possibly fatal typos, because getter and setter are distinguished by signature,
    not only by one letter: dGeomGetPos(g,p) / dGeomSetPos(g,p) --> p = g.getPos() / get.setPos(p)
  - Above that, I think it is normal coding practice in Java to return a value if a method has only
    one result.
  * On the other hand, this can cause problems, because the "immutable' Object may be modified
    while it is used, either through multithreading, or simply by other calls to the Object.
  * Also, it may NOT be modified, because the user does not know whether he gets an actual field
    or only a calculated result back.


Cleanup uses of dVector.v, especially in e.g.
- dxBody
- dxJoint

dxPlane._p -> Change from double[4] to dVector3?

Check and remove references (and commented out occurrences) of:
- dSetZero()

- Try to avoid dPAD()


Remove commented out references to dUSE_MALLOC_FOR_ALLOCA


CPP API should not use internal classes ?!?!?!? Also avoid casting !!!!!
-> Call DJoint j; j.getXY()

TODO
- DOC: @sa -> @see
- DOC: @li -> <li>
- change DxJoint node[0]/[1] to _node0/_node1
- Use ThreadLocal DVector3 Pool to avoid synchronization?
- DEMO: remove references to CPP4J
- Implement auto-allocation of dContacts.
  dContactGeom() -> auto alloc
  dContactGeom(10) -> alloc w/ fixed limit
  dContactGeom(10, bFixed) -> (auto-)alloc w/ bFixed limit
- Test for thread-tolerance!! No static !?!!?!!
- performance: dxGeom should use LinkedIdentityHashSet(?)! (spaceRemove())
  --> Update QuadTreeSpace accordingly!
- TRIMESH et al. Make Colliders to singletons, avoid instantiation in dxHeightfield
- disable DEBUG modes
- replace concatenated dVector math with specific methods, remove set() calls
- replace methods that take x,y,z with ones that take dVector3
- PerfTest and replace 'double[] v' in dVector3 with 'double v0, v1, v2;'
- get rid of all _tome stuff and firstjoint/firstbody
- Check that 'unsigned' is always assigned with fabs(y); !!!
- rename all classes to have capital 'D'?
- Check that org.ode4j.ode.* does not reference org.ode4j.cpp  !!!
- Check that org.ode4j.ode.* does not reference org.ode4j.*.internal.*  ?!?
- Check that org.ode4j.demo.* does not reference org.ode4j.*.internal.*  ?!!
- Get rid of Thread stuff in API_OdeInit / OdeInit (?)
- rename add/sum/setDiff to eqAdd(?)/eqSum/eqDiff
- rename xxx to retSum/retDiff
- deprecate RefDouble in APIs!!
- Think about Radix-sort in SAP SPACE
- In SAP SPACE, use sort for all three dimensions and then prune Pairs
  that are not in all Dimensions?

Bigger plans:
-------------
- Migrate OPCODE TRIMESH library
- Implement GJK algorithm, see:
	http://opende.sourceforge.net/wiki/index.php/How_Collision_Detection_Works
	http://en.wikipedia.org/wiki/Gilbert-Johnson-Keerthi_distance_algorithm

-------------------
Migration guide -> OLD, 0.3.0 ?
-------------------
 
Use QuickStep. Its's faster then Step. StepFast is less stable

dMass
=====
- dMass._c is now a dVector3, but was a dVector4


ID
==
d...ID classes have been removed, use d... instead.
The d...ID.id() method, that used to return the backing object is not necessary
anymore, because the user is always dealing with the actual objects.


OdeHelper
=========
Instead of 'new', Ode objects have to be created via the static methods in OdeHelper.

Z
dContact
========
  dContact contact[N];
  int n = dCollide (o1,o2,N,&(contact[0].geom),sizeof(dContact));
  contact[i].xxx
-->
  dContactBuffer contacts = new dContactBuffer(N);
  int n = dCollide (o1,o2,N,contacts.getGeomBuffer());
  contacts.get(i).xxx
  
- CONTACT(dContactGeom* p, int skip)
  deprecated, instead, please use: dContagGeomBuffer.get(skip);

  
 nearCallback
 ============
 Add the following:
 	private dNearCallback nearCallback = new dNearCallback() {
		@Override
		public void call(Object data, dGeom o1, dGeom o2) {
			nearCallback(data, o1, o2);
		}
	};
 
