/*************************************************************************
 *                                                                       *
 * Open Dynamics Engine 4J, Copyright (C) 2009-2014 Tilmann Zaeschke     *
 * All rights reserved.  Email: ode4j@gmx.de   Web: www.ode4j.org        *
 *                                                                       *
 * This library is free software; you can redistribute it and/or         *
 * modify it under the terms of EITHER:                                  *
 *   (1) The GNU Lesser General Public License as published by the Free  *
 *       Software Foundation; either version 2.1 of the License, or (at  *
 *       your option) any later version. The text of the GNU Lesser      *
 *       General Public License is included with this library in the     *
 *       file LICENSE.TXT.                                               *
 *   (2) The BSD-style license that is included with this library in     *
 *       the file ODE-LICENSE-BSD.TXT and ODE4J-LICENSE-BSD.TXT.         *
 *                                                                       *
 * This library is distributed in the hope that it will be useful,       *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the files    *
 * LICENSE.TXT, ODE-LICENSE-BSD.TXT and ODE4J-LICENSE-BSD.TXT for more   *
 * details.                                                              *
 *                                                                       *
 *************************************************************************/
package org.ode4j.tests;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.ode4j.math.DMatrix3;
import org.ode4j.math.DQuaternion;
import org.ode4j.math.DVector3;
import org.ode4j.math.DVector3C;
import org.ode4j.ode.*;
import org.ode4j.ode.internal.Rotation;

import java.util.Random;

import static org.junit.Assert.fail;
import static org.ode4j.ode.DRotation.dRFromAxisAndAngle;
import static org.ode4j.ode.OdeConstants.*;
import static org.ode4j.ode.OdeHelper.areConnectedExcluding;
import static org.ode4j.ode.OdeHelper.createCylinder;
import static org.ode4j.ode.internal.Common.M_PI;

/**
 *
 */
public class TestIssue0096_CylinderCollisionError {

	private final static int WARMUP = 100 * 1000;
	// private final static int BENCHMARK = 1000 * 1000;
	private final static int BENCHMARK = 100 * 1000;
	private static final double DENSITY = 5.0;        // density of all objects
	private static final int MAX_CONTACTS = 8;

	private DWorld world;
	private DSpace space;
	private final Random r = new Random(0);

	private int cntCollisions = 0;
	private int cntContacts = 0;

	private static final float[] CUBE_POINTS = {
			0.25f, 0.25f, 0.25f, // point 0
			-0.25f, 0.25f, 0.25f, // point 1
			0.25f, -0.25f, 0.25f, // point 2
			-0.25f, -0.25f, 0.25f, // point 3
			0.25f, 0.25f, -0.25f, // point 4
			-0.25f, 0.25f, -0.25f, // point 5
			0.25f, -0.25f, -0.25f, // point 6
			-0.25f, -0.25f, -0.25f,// point 7
	};

	private static final int[] CUBE_INDICES = {
			0, 2, 6, // 0
			0, 6, 4, // 1
			1, 0, 4, // 2
			1, 4, 5, // 3
			0, 1, 3, // 4
			0, 3, 2, // 5
			3, 1, 5, // 6
			3, 5, 7, // 7
			2, 3, 7, // 8
			2, 7, 6, // 9
			5, 4, 6, // 10
			5, 6, 7  // 11
	};


	private static double[] Vertices = {
			-3.1278067, -7.420671, -1.1186001,
			-15.99056, -7.42067, -1.1186008,
			-3.127806, -7.420671, -13.981353,
			-3.1278057, -3.228118, -1.1186001,
			-3.127806, -7.420671, -13.981353,
			-3.127805, -3.228118, -13.981353,
			-15.99056, -7.42067, -1.1186008,
			-15.990559, -3.228116, -13.981354,
			-15.990559, -7.42067, -13.981354,
			-15.99056, -3.228116, -1.1186008,
			-15.99056, -7.42067, -1.1186008,
			-3.1278057, -3.228118, -1.1186001,
			-3.1278067, -7.420671, -1.1186001,
			-3.127806, -7.420671, -13.981353,
			-3.1278057, -3.228118, -1.1186001,
			-3.127806, -7.420671, -13.981353,
			-15.99056, -7.42067, -1.1186008,
			-15.990559, -7.42067, -13.981354,
			-3.127806, -7.420671, -13.981353,
			-15.990559, -3.228116, -13.981354,
			-3.127805, -3.228118, -13.981353,
			-15.99056, -3.228116, -1.1186008,
			-15.990559, -3.228116, -13.981354,
			-15.99056, -7.42067, -1.1186008,
			-3.1278057, -3.228118, -1.1186001,
			-15.99056, -7.42067, -1.1186008,
			-3.1278067, -7.420671, -1.1186001,
			-3.1278057, -3.228118, -1.1186001,
			-15.990559, -3.228116, -13.981354,
			-15.99056, -3.228116, -1.1186008,
			-15.990559, -7.42067, -13.981354,
			-15.990559, -3.228116, -13.981354,
			-3.127806, -7.420671, -13.981353,
			-3.127805, -3.228118, -13.981353,
			-15.990559, -3.228116, -13.981354,
			-3.1278057, -3.228118, -1.1186001,
			10.163512, 1.879245, -5.546432,
			-9.858497, -4.158128, -5.546433,
			10.163513, 1.879245, -9.738984,
			9.858497, 2.890782, -5.546432,
			10.163513, 1.879245, -9.738984,
			9.858498, 2.890782, -9.738984,
			-9.858497, -4.158128, -5.546433,
			-10.163512, -3.14659, -9.738986,
			-9.858496, -4.158128, -9.738986,
			-10.163513, -3.14659, -5.546433,
			-9.858497, -4.158128, -5.546433,
			9.858497, 2.890782, -5.546432,
			10.163512, 1.879245, -5.546432,
			10.163513, 1.879245, -9.738984,
			9.858497, 2.890782, -5.546432,
			10.163513, 1.879245, -9.738984,
			-9.858497, -4.158128, -5.546433,
			-9.858496, -4.158128, -9.738986,
			10.163513, 1.879245, -9.738984,
			-10.163512, -3.14659, -9.738986,
			9.858498, 2.890782, -9.738984,
			-10.163513, -3.14659, -5.546433,
			-10.163512, -3.14659, -9.738986,
			-9.858497, -4.158128, -5.546433,
			9.858497, 2.890782, -5.546432,
			-9.858497, -4.158128, -5.546433,
			10.163512, 1.879245, -5.546432,
			9.858497, 2.890782, -5.546432,
			-10.163512, -3.14659, -9.738986,
			-10.163513, -3.14659, -5.546433,
			-9.858496, -4.158128, -9.738986,
			-10.163512, -3.14659, -9.738986,
			10.163513, 1.879245, -9.738984,
			9.858498, 2.890782, -9.738984,
			-10.163512, -3.14659, -9.738986,
			9.858497, 2.890782, -5.546432,
			7.5056744, -2.096278, 13.573238,
			3.313122, -2.096277, 13.573238,
			7.505676, -2.096278, -5.536417,
			7.505676, 2.096275, 13.573238,
			7.505676, -2.096278, -5.536417,
			7.505677, 2.096275, -5.536417,
			3.313122, -2.096277, 13.573238,
			3.313123, 2.096276, -5.5364175,
			3.313123, -2.096277, -5.5364175,
			3.313122, 2.096276, 13.573238,
			3.313122, -2.096277, 13.573238,
			7.505676, 2.096275, 13.573238,
			7.5056744, -2.096278, 13.573238,
			7.505676, -2.096278, -5.536417,
			7.505676, 2.096275, 13.573238,
			7.505676, -2.096278, -5.536417,
			3.313122, -2.096277, 13.573238,
			3.313123, -2.096277, -5.5364175,
			7.505676, -2.096278, -5.536417,
			3.313123, 2.096276, -5.5364175,
			7.505677, 2.096275, -5.536417,
			3.313122, 2.096276, 13.573238,
			3.313123, 2.096276, -5.5364175,
			3.313122, -2.096277, 13.573238,
			7.505676, 2.096275, 13.573238,
			3.313122, -2.096277, 13.573238,
			7.5056744, -2.096278, 13.573238,
			7.505676, 2.096275, 13.573238,
			3.313123, 2.096276, -5.5364175,
			3.313122, 2.096276, 13.573238,
			3.313123, -2.096277, -5.5364175,
			3.313123, 2.096276, -5.5364175,
			7.505676, -2.096278, -5.536417,
			7.505677, 2.096275, -5.536417,
			3.313123, 2.096276, -5.5364175,
			7.505676, 2.096275, 13.573238,
			-8.192704, -2.015604, 5.088518,
			-8.947364, -2.015604, 5.088518,
			-8.192704, -2.015604, -2.8474822,
			-8.192704, -1.260944, 5.088518,
			-8.192704, -2.015604, -2.8474822,
			-8.192704, -1.260944, -2.8474822,
			-8.947364, -2.015604, 5.088518,
			-8.947364, -1.260944, -2.8474822,
			-8.947364, -2.015604, -2.8474822,
			-8.947364, -1.260944, 5.088518,
			-8.947364, -2.015604, 5.088518,
			-8.192704, -1.260944, 5.088518,
			-8.192704, -2.015604, 5.088518,
			-8.192704, -2.015604, -2.8474822,
			-8.192704, -1.260944, 5.088518,
			-8.192704, -2.015604, -2.8474822,
			-8.947364, -2.015604, 5.088518,
			-8.947364, -2.015604, -2.8474822,
			-8.192704, -2.015604, -2.8474822,
			-8.947364, -1.260944, -2.8474822,
			-8.192704, -1.260944, -2.8474822,
			-8.947364, -1.260944, 5.088518,
			-8.947364, -1.260944, -2.8474822,
			-8.947364, -2.015604, 5.088518,
			-8.192704, -1.260944, 5.088518,
			-8.947364, -2.015604, 5.088518,
			-8.192704, -2.015604, 5.088518,
			-8.192704, -1.260944, 5.088518,
			-8.947364, -1.260944, -2.8474822,
			-8.947364, -1.260944, 5.088518,
			-8.947364, -2.015604, -2.8474822,
			-8.947364, -1.260944, -2.8474822,
			-8.192704, -2.015604, -2.8474822,
			-8.192704, -1.260944, -2.8474822,
			-8.947364, -1.260944, -2.8474822,
			-8.192704, -1.260944, 5.088518,
			-7.389023, -2.293802, 5.088518,
			-8.143681, -2.293802, 5.088518,
			-7.3890224, -2.293802, -2.8474822,
			-7.389023, -1.539142, 5.088518,
			-7.3890224, -2.293802, -2.8474822,
			-7.3890224, -1.539142, -2.8474822,
			-8.143681, -2.293802, 5.088518,
			-8.143681, -1.539142, -2.8474822,
			-8.143681, -2.293802, -2.8474822,
			-8.143681, -1.539142, 5.088518,
			-8.143681, -2.293802, 5.088518,
			-7.389023, -1.539142, 5.088518,
			-7.389023, -2.293802, 5.088518,
			-7.3890224, -2.293802, -2.8474822,
			-7.389023, -1.539142, 5.088518,
			-7.3890224, -2.293802, -2.8474822,
			-8.143681, -2.293802, 5.088518,
			-8.143681, -2.293802, -2.8474822,
			-7.3890224, -2.293802, -2.8474822,
			-8.143681, -1.539142, -2.8474822,
			-7.3890224, -1.539142, -2.8474822,
			-8.143681, -1.539142, 5.088518,
			-8.143681, -1.539142, -2.8474822,
			-8.143681, -2.293802, 5.088518,
			-7.389023, -1.539142, 5.088518,
			-8.143681, -2.293802, 5.088518,
			-7.389023, -2.293802, 5.088518,
			-7.389023, -1.539142, 5.088518,
			-8.143681, -1.539142, -2.8474822,
			-8.143681, -1.539142, 5.088518,
			-8.143681, -2.293802, -2.8474822,
			-8.143681, -1.539142, -2.8474822,
			-7.3890224, -2.293802, -2.8474822,
			-7.3890224, -1.539142, -2.8474822,
			-8.143681, -1.539142, -2.8474822,
			-7.389023, -1.539142, 5.088518,
			-6.593069, -2.50245, 5.088518,
			-7.347729, -2.50245, 5.088518,
			-6.5930686, -2.50245, -2.8474822,
			-6.593069, -1.747791, 5.088518,
			-6.5930686, -2.50245, -2.8474822,
			-6.5930686, -1.747791, -2.8474822,
			-7.347729, -2.50245, 5.088518,
			-7.3477287, -1.747791, -2.8474822,
			-7.3477287, -2.50245, -2.8474822,
			-7.347729, -1.747791, 5.088518,
			-7.347729, -2.50245, 5.088518,
			-6.593069, -1.747791, 5.088518,
			-6.593069, -2.50245, 5.088518,
			-6.5930686, -2.50245, -2.8474822,
			-6.593069, -1.747791, 5.088518,
			-6.5930686, -2.50245, -2.8474822,
			-7.347729, -2.50245, 5.088518,
			-7.3477287, -2.50245, -2.8474822,
			-6.5930686, -2.50245, -2.8474822,
			-7.3477287, -1.747791, -2.8474822,
			-6.5930686, -1.747791, -2.8474822,
			-7.347729, -1.747791, 5.088518,
			-7.3477287, -1.747791, -2.8474822,
			-7.347729, -2.50245, 5.088518,
			-6.593069, -1.747791, 5.088518,
			-7.347729, -2.50245, 5.088518,
			-6.593069, -2.50245, 5.088518,
			-6.593069, -1.747791, 5.088518,
			-7.3477287, -1.747791, -2.8474822,
			-7.347729, -1.747791, 5.088518,
			-7.3477287, -2.50245, -2.8474822,
			-7.3477287, -1.747791, -2.8474822,
			-6.5930686, -2.50245, -2.8474822,
			-6.5930686, -1.747791, -2.8474822,
			-7.3477287, -1.747791, -2.8474822,
			-6.593069, -1.747791, 5.088518,
			-17.114931, -2.551865, 15.523625,
			-17.114931, -2.97112, 15.523625,
			3.8478298, -2.551868, 15.523626,
			-17.114931, -2.551865, -5.4391394,
			3.847831, -2.971123, -5.4391384,
			-17.114931, -2.97112, -5.4391394,
			3.8478298, -2.551868, 15.523626,
			3.847831, -2.551868, -5.4391384,
			-17.114931, -2.551865, -5.4391394,
			-17.114931, -2.97112, 15.523625,
			3.847831, -2.971123, -5.4391384,
			3.8478298, -2.971123, 15.523626,
			-17.114931, -2.551865, -5.4391394,
			-17.114931, -2.97112, 15.523625,
			-17.114931, -2.551865, 15.523625,
			3.847831, -2.551868, -5.4391384,
			3.847831, -2.971123, -5.4391384,
			-17.114931, -2.551865, -5.4391394,
			-17.114931, -2.97112, 15.523625,
			3.8478298, -2.971123, 15.523626,
			3.8478298, -2.551868, 15.523626,
			-17.114931, -2.97112, -5.4391394,
			3.847831, -2.971123, -5.4391384,
			-17.114931, -2.97112, 15.523625,
			-17.114931, -2.551865, 15.523625,
			3.8478298, -2.551868, 15.523626,
			-17.114931, -2.551865, -5.4391394,
			-17.114931, -2.551865, -5.4391394,
			-17.114931, -2.97112, -5.4391394,
			-17.114931, -2.97112, 15.523625,
			3.8478298, -2.971123, 15.523626,
			3.847831, -2.971123, -5.4391384,
			3.8478298, -2.551868, 15.523626,
			3.8478298, -2.551868, 15.523626,
			3.847831, -2.971123, -5.4391384,
			3.847831, -2.551868, -5.4391384,
			-8.962281, -2.528574, 9.14582,
			-8.96228, -2.528574, 7.460415,
			-8.962281, 1.663979, 9.14582,
			-8.962281, 1.663979, 9.14582,
			-10.647687, 1.66398, 9.14582,
			-10.647687, -2.528574, 9.14582,
			-8.96228, -2.528574, 7.460415,
			-10.647686, 1.66398, 7.460415,
			-8.96228, 1.663979, 7.460415,
			-10.647686, 1.66398, 7.460415,
			-10.647686, -2.528574, 7.460415,
			-10.647687, -2.528574, 9.14582,
			-8.962281, 1.663979, 9.14582,
			-8.96228, -2.528574, 7.460415,
			-8.96228, 1.663979, 7.460415,
			-8.962281, 1.663979, 9.14582,
			-10.647687, -2.528574, 9.14582,
			-8.962281, -2.528574, 9.14582,
			-8.962281, 1.663979, 9.14582,
			-10.647686, 1.66398, 7.460415,
			-10.647687, 1.66398, 9.14582,
			-8.96228, -2.528574, 7.460415,
			-10.647686, -2.528574, 7.460415,
			-10.647686, 1.66398, 7.460415,
			-8.962281, -2.528574, 9.14582,
			-10.647687, -2.528574, 9.14582,
			-8.96228, -2.528574, 7.460415,
			-8.96228, 1.663979, 7.460415,
			-10.647686, 1.66398, 7.460415,
			-8.962281, 1.663979, 9.14582,
			-10.647687, 1.66398, 9.14582,
			-10.647686, 1.66398, 7.460415,
			-10.647687, -2.528574, 9.14582,
			-10.647687, -2.528574, 9.14582,
			-10.647686, -2.528574, 7.460415,
			-8.96228, -2.528574, 7.460415,
			-14.774557, -2.539753, 2.0962758,
			-14.774557, -2.539753, -2.0962777,
			-14.774557, 1.6528, 2.0962758,
			-14.774557, 1.6528, 2.0962758,
			-18.967112, 1.652801, 2.0962756,
			-18.967112, -2.539753, 2.0962756,
			-14.774557, -2.539753, -2.0962777,
			-18.967112, 1.652801, -2.096278,
			-14.774557, 1.6528, -2.0962777,
			-18.967112, 1.652801, -2.096278,
			-18.967112, -2.539753, -2.096278,
			-18.967112, -2.539753, 2.0962756,
			-14.774557, 1.6528, 2.0962758,
			-14.774557, -2.539753, -2.0962777,
			-14.774557, 1.6528, -2.0962777,
			-14.774557, 1.6528, 2.0962758,
			-18.967112, -2.539753, 2.0962756,
			-14.774557, -2.539753, 2.0962758,
			-14.774557, 1.6528, 2.0962758,
			-18.967112, 1.652801, -2.096278,
			-18.967112, 1.652801, 2.0962756,
			-14.774557, -2.539753, -2.0962777,
			-18.967112, -2.539753, -2.096278,
			-18.967112, 1.652801, -2.096278,
			-14.774557, -2.539753, 2.0962758,
			-18.967112, -2.539753, 2.0962756,
			-14.774557, -2.539753, -2.0962777,
			-14.774557, 1.6528, -2.0962777,
			-18.967112, 1.652801, -2.096278,
			-14.774557, 1.6528, 2.0962758,
			-18.967112, 1.652801, 2.0962756,
			-18.967112, 1.652801, -2.096278,
			-18.967112, -2.539753, 2.0962756,
			-18.967112, -2.539753, 2.0962756,
			-18.967112, -2.539753, -2.096278,
			-14.774557, -2.539753, -2.0962777,
			2.0962749, -2.533234, 14.647848,
			2.096275, -2.533234, 10.455295,
			2.0962768, 8.182932, 14.647848,
			2.0962768, 8.182932, 14.647848,
			-2.0962758, 8.182933, 14.647848,
			-2.0962777, -2.533234, 14.647848,
			2.096275, -2.533234, 10.455295,
			-2.0962756, 8.182933, 10.455295,
			2.096277, 8.182932, 10.455295,
			-2.0962756, 8.182933, 10.455295,
			-2.0962775, -2.533234, 10.455295,
			-2.0962777, -2.533234, 14.647848,
			2.0962768, 8.182932, 14.647848,
			2.096275, -2.533234, 10.455295,
			2.096277, 8.182932, 10.455295,
			2.0962768, 8.182932, 14.647848,
			-2.0962777, -2.533234, 14.647848,
			2.0962749, -2.533234, 14.647848,
			2.0962768, 8.182932, 14.647848,
			-2.0962756, 8.182933, 10.455295,
			-2.0962758, 8.182933, 14.647848,
			2.096275, -2.533234, 10.455295,
			-2.0962775, -2.533234, 10.455295,
			-2.0962756, 8.182933, 10.455295,
			2.0962749, -2.533234, 14.647848,
			-2.0962777, -2.533234, 14.647848,
			2.096275, -2.533234, 10.455295,
			2.096277, 8.182932, 10.455295,
			-2.0962756, 8.182933, 10.455295,
			2.0962768, 8.182932, 14.647848,
			-2.0962758, 8.182933, 14.647848,
			-2.0962756, 8.182933, 10.455295,
			-2.0962777, -2.533234, 14.647848,
			-2.0962777, -2.533234, 14.647848,
			-2.0962775, -2.533234, 10.455295,
			2.096275, -2.533234, 10.455295,
			-4.8586664, -2.096276, 13.324335,
			-9.051219, -2.096275, 13.324334,
			-4.858666, -2.096276, 9.131782,
			-4.8586655, 2.096277, 13.324335,
			-9.051219, 2.096278, 9.131781,
			-9.051219, 2.096278, 13.324334,
			-4.858666, -2.096276, 9.131782,
			-9.051219, 2.096278, 9.131781,
			-4.858665, 2.096277, 9.131782,
			-9.051219, 2.096278, 9.131781,
			-9.051219, -2.096275, 9.131781,
			-9.051219, -2.096275, 13.324334,
			-4.8586664, -2.096276, 13.324335,
			-4.858666, -2.096276, 9.131782,
			-4.8586655, 2.096277, 13.324335,
			-4.858665, 2.096277, 9.131782,
			-9.051219, 2.096278, 9.131781,
			-4.8586655, 2.096277, 13.324335,
			-9.051219, -2.096275, 13.324334,
			-9.051219, -2.096275, 9.131781,
			-4.858666, -2.096276, 9.131782,
			-9.051219, 2.096278, 13.324334,
			-9.051219, 2.096278, 9.131781,
			-9.051219, -2.096275, 13.324334,
			-4.8586655, 2.096277, 13.324335,
			-4.858666, -2.096276, 9.131782,
			-4.858665, 2.096277, 9.131782,
			-4.8586655, 2.096277, 13.324335,
			-9.051219, -2.096275, 13.324334,
			-4.8586664, -2.096276, 13.324335,
			-4.858666, -2.096276, 9.131782,
			-9.051219, -2.096275, 9.131781,
			-9.051219, 2.096278, 9.131781,
			-4.8586655, 2.096277, 13.324335,
			-9.051219, 2.096278, 13.324334,
			-9.051219, -2.096275, 13.324334};
	private static int[] Indices = {
			0, 1, 2,
			3, 4, 5,
			6, 7, 8,
			9, 10, 11,
			12, 13, 14,
			15, 16, 17,
			18, 19, 20,
			21, 22, 23,
			24, 25, 26,
			27, 28, 29,
			30, 31, 32,
			33, 34, 35,
			36, 37, 38,
			39, 40, 41,
			42, 43, 44,
			45, 46, 47,
			48, 49, 50,
			51, 52, 53,
			54, 55, 56,
			57, 58, 59,
			60, 61, 62,
			63, 64, 65,
			66, 67, 68,
			69, 70, 71,
			72, 73, 74,
			75, 76, 77,
			78, 79, 80,
			81, 82, 83,
			84, 85, 86,
			87, 88, 89,
			90, 91, 92,
			93, 94, 95,
			96, 97, 98,
			99, 100, 101,
			102, 103, 104,
			105, 106, 107,
			108, 109, 110,
			111, 112, 113,
			114, 115, 116,
			117, 118, 119,
			120, 121, 122,
			123, 124, 125,
			126, 127, 128,
			129, 130, 131,
			132, 133, 134,
			135, 136, 137,
			138, 139, 140,
			141, 142, 143,
			144, 145, 146,
			147, 148, 149,
			150, 151, 152,
			153, 154, 155,
			156, 157, 158,
			159, 160, 161,
			162, 163, 164,
			165, 166, 167,
			168, 169, 170,
			171, 172, 173,
			174, 175, 176,
			177, 178, 179,
			180, 181, 182,
			183, 184, 185,
			186, 187, 188,
			189, 190, 191,
			192, 193, 194,
			195, 196, 197,
			198, 199, 200,
			201, 202, 203,
			204, 205, 206,
			207, 208, 209,
			210, 211, 212,
			213, 214, 215,
			216, 217, 218,
			219, 220, 221,
			222, 223, 224,
			225, 226, 227,
			228, 229, 230,
			231, 232, 233,
			234, 235, 236,
			237, 238, 239,
			240, 241, 242,
			243, 244, 245,
			246, 247, 248,
			249, 250, 251,
			252, 253, 254,
			255, 256, 257,
			258, 259, 260,
			261, 262, 263,
			264, 265, 266,
			267, 268, 269,
			270, 271, 272,
			273, 274, 275,
			276, 277, 278,
			279, 280, 281,
			282, 283, 284,
			285, 286, 287,
			288, 289, 290,
			291, 292, 293,
			294, 295, 296,
			297, 298, 299,
			300, 301, 302,
			303, 304, 305,
			306, 307, 308,
			309, 310, 311,
			312, 313, 314,
			315, 316, 317,
			318, 319, 320,
			321, 322, 323,
			324, 325, 326,
			327, 328, 329,
			330, 331, 332,
			333, 334, 335,
			336, 337, 338,
			339, 340, 341,
			342, 343, 344,
			345, 346, 347,
			348, 349, 350,
			351, 352, 353,
			354, 355, 356,
			357, 358, 359,
			360, 361, 362,
			363, 364, 365,
			366, 367, 368,
			369, 370, 371,
			372, 373, 374,
			375, 376, 377,
			378, 379, 380,
			381, 382, 383,
			384, 385, 386,
			387, 388, 389,
			390, 391, 392,
			393, 394, 395};

	private DGeom cylinder() {
		double radius = 0.5; // r.nextDouble();
		double length = 2.0; // r.nextDouble();
		DGeom geom = OdeHelper.createCylinder(space, radius, length);

		DBody body = OdeHelper.createBody(world);

		DMass mass = OdeHelper.createMass();
		mass.setCylinder(DENSITY, r.nextInt(3) + 1, radius, length);




//
//		DVector3 pos = new DVector3(i, MathUtils.random(10, 20), j);
//		DQuaternion q = new DQuaternion(Vector3.X, MathUtils.random(0f, 270f));
//
////		entity.modelInstance = new ModelInstance(modelBuilder.end());
////		entity.modelInstance.transform.setToTranslation(pos);
////		entity.modelInstance.transform.rotate(q);
//
//		DQuaternion qq = new DQuaternion();
//		qq.set(q.w, q.x, q.y, q.z);
//		geom.setQuaternion(qq);
//		//entity.geom[0].setPosition(pos.x, pos.y, pos.z);
//		//entity.body.setPosition(pos.x, pos.y, pos.z);
//		body.setQuaternion(qq);



		return assemble(geom, body2(), mass);
	}

	private DGeom sphere() {
		// new Body(), new Mass(), new Geom(), geom.setBody(), body.setMass().
		double radius = 0.5;//r.nextDouble();
		DGeom geom = OdeHelper.createSphere(space, radius);

		DMass mass = OdeHelper.createMass();
		mass.setSphere(DENSITY, radius);

		return assemble(geom, body(), mass);
	}

	private DGeom trimesh() {
		DTriMeshData data = OdeHelper.createTriMeshData();
		//data.build(CUBE_POINTS, CUBE_INDICES);
		float[] f = new float[Vertices.length];
		for (int i = 0; i < f.length; ++i) {
			f[i] = (float) Vertices[i];
		}
		data.build(f, Indices);
		data.preprocess();
		DTriMesh geom = OdeHelper.createTriMesh(space, data, null, null, null);





		geom.setPosition(0,0,0);
		DMatrix3 Rotation1 = new DMatrix3();
		Rotation.dRFromAxisAndAngle(Rotation1, 0, 1, 0, M_PI / 2);
		//sceneTriMesh.setRotation(Rotation1);

		DBody body = OdeHelper.createBody(world);
		body.setRotation(Rotation1);


//		DMass mass = OdeHelper.createMass();
//		mass.setTrimesh(DENSITY, geom);

		//return assemble(geom, body(), mass);
		return geom;
	}

	private DSpace createSpace() {
		return OdeHelper.createSimpleSpace();
		// return OdeHelper.createSapSpace(DSapSpace.AXES.XZY);
		// return OdeHelper.createBHVSpace(0);
	}

	private DBody body() {
		DBody body = OdeHelper.createBody(world);

//		body.setPosition(0, 0, 0);

//		DMatrix3 R = new DMatrix3();
//		DVector3 a = vector().scale(2).sub(1, 1, 1);
//		dRFromAxisAndAngle(R, a, r.nextDouble() * 10.0 - 5.0);
//		body.setRotation(R);

		return body;
	}

	private DBody body2() {
		DBody body = OdeHelper.createBody(world);

//		body.setPosition(vector().scale(25));
//
//		DMatrix3 R = new DMatrix3();
//		DVector3 a = vector().scale(2).sub(1, 1, 1);
//		dRFromAxisAndAngle(R, a, r.nextDouble() * 10.0 - 5.0);
//		body.setRotation(R);

		return body;
	}

	private DGeom assemble(DGeom geom, DBody body, DMass mass) {
		geom.setBody(body);
		// DVector3C c = mass.getC();
		// mass.translate(-c.get0(), -c.get1(), -c.get2() );
		body.setMass(mass);
		return geom;
	}

	private DVector3 vector() {
		return new DVector3(r.nextDouble(), r.nextDouble(), r.nextDouble());
	}

	private final DGeom.DNearCallback nearCallback = new DGeom.DNearCallback() {
		@Override
		public void call(Object data, DGeom o1, DGeom o2) {
			nearCallback(o1, o2);
		}
	};

	//private final DContactBuffer contacts = new DContactBuffer(MAX_CONTACTS);


	// this is called by dSpaceCollide when two objects in space are
	// potentially colliding.
	private void nearCallback(DGeom o1, DGeom o2) {
		// if (o1->body && o2->body) return;

		// exit without doing anything if the two bodies are connected by a joint
		DBody b1 = o1.getBody();
		DBody b2 = o2.getBody();
		if (b1 != null && b2 != null && areConnectedExcluding(b1, b2, DContactJoint.class)) return;

		DContactBuffer contacts = new DContactBuffer(MAX_CONTACTS);   // up to MAX_CONTACTS contacts per box-box
		for (int i = 0; i < MAX_CONTACTS; i++) {
			DContact contact = contacts.get(i);
			contact.surface.mode = dContactBounce | dContactSoftCFM;
			contact.surface.mu = dInfinity;
			contact.surface.mu2 = 0;
			contact.surface.bounce = 0.1;
			contact.surface.bounce_vel = 0.1;
			contact.surface.soft_cfm = 0.01;

			contact.geom.depth = 0;
			contact.geom.pos.setZero();
			contact.geom.g1 = null;
			contact.geom.g2 = null;

			contact.fdir1.setZero();
		}
		int numc = OdeHelper.collide(o1, o2, MAX_CONTACTS, contacts.getGeomBuffer());
		if (numc != 0) {
			cntCollisions++;
			cntContacts += numc;
		}
	}

	private void collide(int iterations) {
		cntCollisions = 0;
		cntContacts = 0;
		for (int j = 0; j < iterations; j++) {
			space.collide(null, nearCallback);
			world.quickStep(1/30f);
		}
	}

	@Before
	public void beforeTest() {
		OdeHelper.initODE2(0);
		world = OdeHelper.createWorld();
		space = createSpace();
		// world.setGravity (0,0,-0.5);
		world.setCFM(1e-5);
	}

	@After
	public void afterTest() {
		space.destroy();
		world.destroy();
		OdeHelper.closeODE();
		System.gc();
	}

	@Test
	public void testIssue96() {
		for (int i = 0; i < 100; ++i) {
			DGeom g1 = cylinder();//createCylinder(1, 1);
			DGeom g2 = trimesh();//createCylinder(1, 1);
			g2.setPosition(0,0,-0.75);
			collide(100);
			g1.destroy();
			g2.destroy();
		}
	}

	@Test
	public void testIssue2() {
		DGeom g2 = sphere();
		DGeom g1 = cylinder();
		DGeom g3 = trimesh();//createCylinder(1, 1);
		// This causes a contact normal with {NaN} in CollideCylinderSphere due to a division by t=0.0 .

		// We DO get NaN in Cylinder/Sphere contact NaN, but it doesn't reproduce the problem that the
		// Trimesh/Cylinder collider sees only NaN for the cylinder's posr().
		collide( 100);
	}
}